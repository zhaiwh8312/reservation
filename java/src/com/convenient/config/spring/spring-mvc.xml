<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
    http://www.springframework.org/schema/tx   
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  
    http://www.springframework.org/schema/context  
    http://www.springframework.org/schema/context/spring-context-3.0.xsd  
    http://www.springframework.org/schema/mvc  
    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

	<!-- 自动扫描的包名,扫描指定的包中的类上的注解 -->
	<context:component-scan base-package="com.convenient.*"></context:component-scan>
	
	<!-- 注解映射的支持 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		<property name="interceptors">
			<list>
				<!-- 这里是总拦截器，自己配置路径拦截请看spring-interceptors.xml- -->
			</list>
		</property>
	</bean>
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">  
			<list>  
				<ref bean="byteArray_hmc" />  
				<ref bean="string_hmc" />  
				<ref bean="resource_hmc" />  
				<ref bean="source_hmc" />  
				<ref bean="xmlAwareForm_hmc" />  
				<ref bean="jaxb2RootElement_hmc" />
				<ref bean="jackson_hmc" />  
			</list>
		</property>	
	</bean>
	
	<!-- 
		ByteArrayHttpMessageConverter: 负责读取二进制格式的数据和写出二进制格式的数据；
		StringHttpMessageConverter：   负责读取字符串格式的数据和写出二进制格式的数据；
		ResourceHttpMessageConverter：负责读取资源文件和写出资源文件数据； 
		FormHttpMessageConverter：       负责读取form提交的数据（能读取的数据格式为 application/x-www-form-urlencoded，不能读取multipart/form-data格式数据）；负责写入application/x-www-from-urlencoded和multipart/form-data格式的数据；
		MappingJacksonHttpMessageConverter:  负责读取和写入json格式的数据；
		SourceHttpMessageConverter：                   负责读取和写入 xml 中javax.xml.transform.Source定义的数据；
		Jaxb2RootElementHttpMessageConverter:  负责读取和写入xml 标签格式的数据；
		AtomFeedHttpMessageConverter:              负责读取和写入Atom格式的数据；
		RssChannelHttpMessageConverter:           负责读取和写入RSS格式的数据；
	 -->
	
	<bean id="byteArray_hmc" class="org.springframework.http.converter.ByteArrayHttpMessageConverter" /><!-- 处理.. -->
	<bean id="string_hmc" class="org.springframework.http.converter.StringHttpMessageConverter" /><!-- 处理.. -->
	<bean id="resource_hmc" class="org.springframework.http.converter.ResourceHttpMessageConverter" /><!-- 处理.. -->
	<bean id="source_hmc" class="org.springframework.http.converter.xml.SourceHttpMessageConverter" /><!-- 处理.. -->
	<bean id="xmlAwareForm_hmc" class="org.springframework.http.converter.xml.XmlAwareFormHttpMessageConverter" /><!-- 处理.. -->
	<bean id="jaxb2RootElement_hmc" class="org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter" /><!-- 处理.. -->
	<bean id="jackson_hmc" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" /><!-- 处理json-->

	<!-- 总错误处理-->
	<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings"> 
			<props> 
				<!-- 上传文件大于最大尺寸后转向出错页面 --> 
				<prop key="org.springframework.web.multipart.MaxUploadSizeExceededException"> 
					redirect:/uploadError.jsp
				</prop> 
			</props> 
		</property> 
		<property name="defaultErrorView">  
		 	<value>forward:/error/500.html</value>
		</property>
		<property name="defaultStatusCode">  
		 	<value>200</value>
		</property>		 	
		<property name="warnLogCategory">  
		 	<value>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver</value>
		</property>
	</bean>

	<!-- 视图解释类 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/" />
		<property name="suffix" value="" /><!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑 -->
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
	</bean>
	
	<!-- 对静态资源文件的访问  -->
	<mvc:resources mapping="/resource/**" location="/resource/" cache-period="31556926" />
	<mvc:resources mapping="/error/**" location="/error/" cache-period="31556926" />
	<mvc:resources mapping="/welcome.html" location="/welcome.html" cache-period="31556926" />
	<mvc:resources mapping="/NewFile.jsp" location="/welcome.html" cache-period="31556926" />
	
	<!-- 用于持有ApplicationContext,可以使用SpringContextHolder.getBean('xxxx')的静态方法得到spring bean对象 -->  
	<bean class="com.convenient.base.context.SpringContextHolder" lazy-init="false" />
</beans>